name: Daily Dependency Updates

on:
  # schedule:
  #   # Run daily at 2 AM UTC
  #   - cron: '0 2 * * *'
  # workflow_dispatch:
  push:
    branches-ignore:
      - 'main'
      - 'docs'


env:
  NODE_VERSION: '18'

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  dependency-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.BOT_PAT }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
            node-version: ${{ env.NODE_VERSION }}
            cache: 'npm'

      - name: Configure Git
        run: |
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git config --global url."https://aws-crt-bot:${{ secrets.BOT_PAT }}@github.com/".insteadOf "https://github.com/"

      - name: Create branch name with timestamp
        id: branch
        run: |
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            BRANCH_NAME="dependency-updates/${TIMESTAMP}"
            echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
            echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT

      - name: Install current dependencies
        run: npm ci

      - name: Run npm audit fix
        run: |
            echo "Running npm audit fix..."
            npm audit --audit-level=moderate --json > audit_results.json || true
            npm audit fix --audit-level=moderate || true
            echo "npm audit fix completed"

      - name: Reinstall with lockfile version 1
        run: |
            echo "Reinstalling dependencies with lockfile version 1..."
            npm install --lockfile-version=1
            echo "Dependencies reinstalled"

      - name: Check for changes
        id: changes
        run: |
          echo "=== DEBUG: Starting change detection ==="
          echo "Current working directory: $(pwd)"
          echo "Git status before adding files:"
          git status --porcelain

          echo ""
          echo "=== DEBUG: Checking file existence ==="
          echo "package.json exists: $(test -f package.json && echo 'YES' || echo 'NO')"
          echo "package-lock.json exists: $(test -f package-lock.json && echo 'YES' || echo 'NO')"

          echo ""
          echo "=== DEBUG: File sizes and timestamps ==="
          if [ -f package.json ]; then
            echo "package.json size: $(wc -c < package.json) bytes"
            echo "package.json modified: $(stat -c %y package.json 2>/dev/null || stat -f %Sm package.json)"
          fi
          if [ -f package-lock.json ]; then
            echo "package-lock.json size: $(wc -c < package-lock.json) bytes"
            echo "package-lock.json modified: $(stat -c %y package-lock.json 2>/dev/null || stat -f %Sm package-lock.json)"
          fi

          echo ""
          echo "=== DEBUG: Git diff before staging ==="
          echo "Unstaged changes in package.json:"
          git diff --name-only | grep package.json || echo "No unstaged changes in package.json"
          echo "Unstaged changes in package-lock.json:"
          git diff --name-only | grep package-lock.json || echo "No unstaged changes in package-lock.json"

          echo ""
          echo "=== DEBUG: Adding files to staging area ==="
          echo "Adding package-lock.json..."
          git add package-lock.json
          echo "Adding package.json..."
          git add package.json

          echo ""
          echo "=== DEBUG: Git status after adding files ==="
          git status --porcelain

          echo ""
          echo "=== DEBUG: Staged changes details ==="
          echo "Files in staging area:"
          git diff --staged --name-only
          echo ""
          echo "Staged changes summary:"
          git diff --staged --stat

          echo ""
          echo "=== DEBUG: Checking for staged changes ==="
          if git diff --staged --quiet; then
            echo "✅ DEBUG: git diff --staged --quiet returned TRUE (no changes)"
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "✅ DEBUG: git diff --staged --quiet returned FALSE (changes found)"
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT

            echo ""
            echo "=== DEBUG: Detailed diff output ==="
            echo "Staged diff (first 50 lines):"
            git diff --staged | head -50

            echo ""
            echo "=== DEBUG: File-specific changes ==="
            if git diff --staged --name-only | grep -q "package-lock.json"; then
              echo "📦 package-lock.json has staged changes"
              echo "Lines changed in package-lock.json: $(git diff --staged --numstat package-lock.json | cut -f1,2)"
            else
              echo "📦 package-lock.json has NO staged changes"
            fi

            if git diff --staged --name-only | grep -q "package.json"; then
              echo "📋 package.json has staged changes"
              echo "Lines changed in package.json: $(git diff --staged --numstat package.json | cut -f1,2)"
            else
              echo "📋 package.json has NO staged changes"
            fi

            echo ""
            echo "=== DEBUG: Creating changes summary ==="

            # Get summary of changes
            echo "## Changes Summary" > changes_summary.md
            echo "" >> changes_summary.md

            # Check if package-lock.json changed
            if git diff --staged --name-only | grep -q "package-lock.json"; then
              echo "- 📦 package-lock.json updated" >> changes_summary.md
              echo "DEBUG: Added package-lock.json to summary"
            else
              echo "DEBUG: package-lock.json not in staged changes"
            fi

            # Check if package.json changed
            if git diff --staged --name-only | grep -q "package.json"; then
              echo "- 📋 package.json updated" >> changes_summary.md
              echo "DEBUG: Added package.json to summary"
            else
              echo "DEBUG: package.json not in staged changes"
            fi

            # Get audit results
            echo "" >> changes_summary.md
            echo "### Audit Results" >> changes_summary.md

            echo ""
            echo "=== DEBUG: Processing audit results ==="
            echo "audit_results.json exists: $(test -f audit_results.json && echo 'YES' || echo 'NO')"
            if [ -f audit_results.json ]; then
              echo "audit_results.json size: $(wc -c < audit_results.json) bytes"
              echo "First 200 characters of audit_results.json:"
              head -c 200 audit_results.json
              echo ""
              echo "Checking if valid JSON:"
              if jq empty audit_results.json 2>/dev/null; then
                echo "✅ Valid JSON format"
              else
                echo "❌ Invalid JSON format"
                echo "JSON validation error:"
                jq empty audit_results.json 2>&1 || true
              fi
            fi

            # Parse audit results for summary
            if [ -f audit_results.json ]; then
                echo "DEBUG: Starting audit results parsing..."

                # Check if there are any vulnerabilities
                echo "DEBUG: Extracting total vulnerabilities count..."
                TOTAL_VULNS=$(jq -r '.metadata.vulnerabilities.total // 0' audit_results.json 2>/dev/null)
                echo "DEBUG: Total vulnerabilities found: $TOTAL_VULNS"

                echo "DEBUG: Checking metadata structure:"
                jq -r '.metadata // "No metadata found"' audit_results.json 2>/dev/null | head -5

                echo "DEBUG: Checking vulnerabilities structure:"
                jq -r '.vulnerabilities // "No vulnerabilities object found"' audit_results.json 2>/dev/null | head -100

                if [ "$TOTAL_VULNS" -gt 0 ]; then
                  echo "DEBUG: Processing $TOTAL_VULNS vulnerabilities..."
                  echo "**Security Vulnerabilities Found ($TOTAL_VULNS total):**" >> changes_summary.md
                  echo "" >> changes_summary.md

                  # Get list of vulnerable packages
                  echo "DEBUG: Getting list of vulnerable packages..."
                  PACKAGES=$(jq -r '.vulnerabilities | keys[]' audit_results.json 2>/dev/null)
                  echo "DEBUG: Found packages: $PACKAGES"
                  PACKAGE_COUNT=$(echo "$PACKAGES" | wc -w)
                  echo "DEBUG: Processing $PACKAGE_COUNT packages..."

                  # Process each package
                  PACKAGE_INDEX=0
                  for PACKAGE in $PACKAGES; do
                    PACKAGE_INDEX=$((PACKAGE_INDEX + 1))
                    echo "DEBUG: Processing package $PACKAGE_INDEX/$PACKAGE_COUNT: $PACKAGE"
                    # Extract data with null checks and default values
                    SEVERITY=$(jq -r ".vulnerabilities[\"$PACKAGE\"].severity // \"unknown\"" audit_results.json 2>/dev/null)
                    echo "DEBUG: Severity: $SEVERITY"
                    RANGE=$(jq -r ".vulnerabilities[\"$PACKAGE\"].range // \"N/A\"" audit_results.json 2>/dev/null)
                    echo "DEBUG: Range: $RANGE"
                    IS_DIRECT=$(jq -r ".vulnerabilities[\"$PACKAGE\"].isDirect // false" audit_results.json 2>/dev/null)
                    echo "DEBUG: Is Direct: $IS_DIRECT"
                    FIX_AVAILABLE=$(jq -r "if .vulnerabilities[\"$PACKAGE\"].fixAvailable then (if (.vulnerabilities[\"$PACKAGE\"].fixAvailable | type) == \"object\" then \"true\" else (.vulnerabilities[\"$PACKAGE\"].fixAvailable | tostring) end) else \"false\" end" audit_results.json 2>/dev/null)
                    echo "DEBUG: Fix Available: $FIX_AVAILABLE"
                    NODES=$(jq -r "if .vulnerabilities[\"$PACKAGE\"].nodes then (.vulnerabilities[\"$PACKAGE\"].nodes | join(\", \")) else \"N/A\" end" audit_results.json 2>/dev/null)
                    echo "DEBUG: Nodes: $NODES"

                    echo "### 🚨 $PACKAGE ($SEVERITY severity)" >> changes_summary.md
                    echo "- **Affected versions:** $RANGE" >> changes_summary.md
                    echo "- **Direct dependency:** $([ "$IS_DIRECT" = "true" ] && echo "Yes" || echo "No")" >> changes_summary.md
                    echo "- **Fix available:** $([ "$FIX_AVAILABLE" = "true" ] && echo "✅ Yes" || echo "❌ No")" >> changes_summary.md
                    echo "- **Installed locations:** $NODES" >> changes_summary.md
                    echo "- **Advisories:**" >> changes_summary.md
                    echo "DEBUG: Get advisories for this package"

                    # Get advisories for this package
                    ADVISORY_COUNT=$(jq -r ".vulnerabilities[\"$PACKAGE\"].via | length // 0" audit_results.json 2>/dev/null)
                    echo "DEBUG: ADVISORY_COUNT: $ADVISORY_COUNT"

                    # Check if via contains objects or strings
                    VIA_TYPE=$(jq -r "if .vulnerabilities[\"$PACKAGE\"].via and (.vulnerabilities[\"$PACKAGE\"].via | length) > 0 then (.vulnerabilities[\"$PACKAGE\"].via[0] | type) else \"null\" end" audit_results.json 2>/dev/null)
                    echo "DEBUG: VIA_TYPE: $VIA_TYPE"

                    if [ "$VIA_TYPE" = "object" ]; then
                      # Process as objects with title/url/cvss
                      for ((i=0; i<ADVISORY_COUNT; i++)); do
                        TITLE=$(jq -r ".vulnerabilities[\"$PACKAGE\"].via[$i].title // \"Unknown\"" audit_results.json 2>/dev/null)
                        echo "DEBUG: TITLE: $TITLE"
                        URL=$(jq -r ".vulnerabilities[\"$PACKAGE\"].via[$i].url // \"#\"" audit_results.json 2>/dev/null)
                        echo "DEBUG: URL: $URL"
                        CVSS_SCORE=$(jq -r ".vulnerabilities[\"$PACKAGE\"].via[$i].cvss.score // 0" audit_results.json 2>/dev/null)
                        echo "DEBUG: CVSS_SCORE: $CVSS_SCORE"

                        if [ "$CVSS_SCORE" != "0" ] && [ "$CVSS_SCORE" != "null" ]; then
                          echo "  - [$TITLE]($URL) (CVSS: $CVSS_SCORE)" >> changes_summary.md
                        else
                          echo "  - [$TITLE]($URL)" >> changes_summary.md
                        fi
                      done
                    elif [ "$VIA_TYPE" = "string" ]; then
                      # Process as strings (package names)
                      for ((i=0; i<ADVISORY_COUNT; i++)); do
                        VIA_PACKAGE=$(jq -r ".vulnerabilities[\"$PACKAGE\"].via[$i]" audit_results.json 2>/dev/null)
                        echo "DEBUG: VIA_PACKAGE: $VIA_PACKAGE"
                        echo "  - Vulnerability via package: $VIA_PACKAGE" >> changes_summary.md
                      done
                    else
                      echo "  - No advisory details available" >> changes_summary.md
                    fi

                    echo "" >> changes_summary.md
                  done

                  echo "" >> changes_summary.md

                  # Summary by severity
                  echo "**Vulnerability Summary by Severity:**" >> changes_summary.md
                  jq -r '.metadata.vulnerabilities | to_entries[] | select(.value > 0) |
                    if .key == "critical" then "🔴 Critical: " + (.value | tostring)
                    elif .key == "high" then "🟠 High: " + (.value | tostring)
                    elif .key == "moderate" then "🟡 Moderate: " + (.value | tostring)
                    elif .key == "low" then "🟢 Low: " + (.value | tostring)
                    elif .key == "info" then "ℹ️ Info: " + (.value | tostring)
                    else .key + ": " + (.value | tostring)
                    end' audit_results.json 2>/dev/null | while read line; do
                    echo "- $line" >> changes_summary.md
                  done

                  echo "" >> changes_summary.md

                  # Recommendations
                  echo "**Recommended Actions:**" >> changes_summary.md

                  # Check for packages with fixes available
                  FIXABLE_COUNT=$(jq -r '[.vulnerabilities[] | select(.fixAvailable == true)] | length' audit_results.json 2>/dev/null)
                  if [ "$FIXABLE_COUNT" -gt 0 ]; then
                    echo "- 🔧 Run \`npm audit fix\` to automatically fix $FIXABLE_COUNT vulnerable package(s)" >> changes_summary.md
                  fi

                  # Check for direct dependencies
                  DIRECT_VULNS=$(jq -r '[.vulnerabilities[] | select(.isDirect == true)] | length' audit_results.json 2>/dev/null)
                  if [ "$DIRECT_VULNS" -gt 0 ]; then
                    echo "- ⚠️ $DIRECT_VULNS direct dependencies have vulnerabilities - consider updating or replacing" >> changes_summary.md
                  fi

                  # Check for critical/high severity
                  CRITICAL_HIGH=$(jq -r '(.metadata.vulnerabilities.critical // 0) + (.metadata.vulnerabilities.high // 0)' audit_results.json 2>/dev/null)
                  if [ "$CRITICAL_HIGH" -gt 0 ]; then
                    echo "- � $CRITICAL_HIGH critical/high severity vulnerabilities require immediate attention" >> changes_summary.md
                  fi

                else
                  echo "✅ **No security vulnerabilities found**" >> changes_summary.md
                fi

                # Add dependency summary
                echo "" >> changes_summary.md
                echo "**Dependency Summary:**" >> changes_summary.md
                jq -r '.metadata.dependencies |
                  "- Total dependencies: " + (.total | tostring) + "\n" +
                  "- Production: " + (.prod | tostring) + "\n" +
                  "- Development: " + (.dev | tostring) + "\n" +
                  "- Optional: " + (.optional | tostring)' audit_results.json 2>/dev/null >> changes_summary.md
            else
                echo "✅ No vulnerabilities found" >> changes_summary.md
            fi

            echo "" >> changes_summary.md
            echo "### Files Changed" >> changes_summary.md
            git diff --staged --name-only | sed 's/^/- /' >> changes_summary.md
          fi

      - name: Create branch and commit changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git checkout -b ${{ steps.branch.outputs.branch_name }}
          git commit -m "chore: automated dependency updates

          - Run npm audit fix to address security vulnerabilities
          - Reinstall dependencies with lockfile-version=1
          - Automated update on ${{ steps.branch.outputs.timestamp }}

          🤖 Assisted by GenAI"

      - name: Push branch
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git push origin ${{ steps.branch.outputs.branch_name }}

      - name: Create Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_PAT }}
          script: |
            const fs = require('fs');

            // Read the changes summary
            let body = '';
            try {
              body = fs.readFileSync('changes_summary.md', 'utf8');
            } catch (error) {
              body = 'Automated dependency updates performed.';
            }

            // Add additional context to PR body
            const fullBody = `# 🔄 Automated Dependency Updates

            This PR contains automated dependency updates performed by the daily maintenance workflow.

            ${body}

            ## What was done:
            1. ✅ Ran \`npm audit fix\` to address security vulnerabilities
            2. ✅ Ran \`npm install --lockfile-version=1\` to ensure lockfile compatibility
            3. ✅ Committed any resulting changes

            ## Review Guidelines:
            - 🔍 Review the changes in \`package-lock.json\` for any unexpected updates
            - 🧪 Ensure CI tests pass before merging
            - 🚀 This PR can be safely merged if all checks pass

            ---
            *This PR was automatically created by the dependency-updates workflow.*
            `;

            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `chore: automated dependency updates (${{ steps.branch.outputs.timestamp }})`,
              head: '${{ steps.branch.outputs.branch_name }}',
              base: 'main',
              body: fullBody,
              draft: false
            });

            console.log(`Created PR #${pr.number}: ${pr.html_url}`);

      - name: Summary
        run: |
          if [ "${{ steps.changes.outputs.has_changes }}" == "true" ]; then
            echo "✅ Dependency updates completed and PR created"
            echo "Branch: ${{ steps.branch.outputs.branch_name }}"
          else
            echo "ℹ️ No dependency updates needed"
          fi
